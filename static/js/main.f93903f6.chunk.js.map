{"version":3,"sources":["components/CityComponent.js","components/WeatherComponent.js","App.js","index.js"],"names":["WeatherLogo","styled","img","ChooseCityMsg","h2","SearchBox","form","CityComponent","setCity","fetchWeather","src","onSubmit","onChange","e","target","value","type","placeholder","WeatherInfoIcons","Sunrise","Sunset","Humidity","Wind","Pressure","WeatherIcons","WeatherCondition","div","Temperature","span","Location","p","WeatherInfoLabel","WeatherInfoContainer","InfoContainer","InfoIcon","InfoLabel","Restart","button","WeatherInfoComponent","name","WeatherComponent","timeStamp","data","isDay","weather","icon","includes","console","log","Math","floor","main","temp","description","sys","country","sunset","sunrise","Date","getHours","getMinutes","humidity","wind","speed","pressure","onClick","window","location","reload","Container","Label","App","useState","city","weatherData","setWeatherData","a","preventDefault","axios","get","response","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f93903f6.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst WeatherLogo = styled.img`\n  margin: 30px auto;\n  width: 150px;\n  height: 150px;\n`;\n\nconst ChooseCityMsg = styled.h2`\n  margin: 10px auto;\n  font-size: 20px;\n  font-weight: 600;\n`;\n\nconst SearchBox = styled.form`\n  display: flex;\n  margin: 20px auto;\n\n  border: 1px solid #035956;\n\n  & input {\n    outline: none;\n    border: 1px solid #035956;\n    border-right: none;\n\n    padding: 5px;\n\n    font-size: 18px;\n    font-weight: 500;\n  }\n\n  & button {\n    background: #fff;\n    color: #035956;\n\n    border: 1px solid #035956;\n    border-left: none;\n    padding: 5px;\n\n    font-size: 18px;\n    font-weight: 500;\n  }\n\n  & button:hover {\n    cursor: pointer;\n    background: #035956;\n    color: #fff;\n  }\n`;\n\nexport default function CityComponent({ setCity, fetchWeather }) {\n  return (\n    <>\n      <WeatherLogo src=\"/icons/perfect-day.svg\" />\n      <ChooseCityMsg>Find Weather of Your City</ChooseCityMsg>\n      <SearchBox onSubmit={fetchWeather}>\n        <input\n          onChange={(e) => setCity(e.target.value)}\n          type=\"text\"\n          placeholder=\"English Name of City\"\n        />\n        <button type=\"submit\">search</button>\n      </SearchBox>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nconst WeatherInfoIcons = {\n  Sunrise: '/icons/temp.svg',\n  Sunset: '/icons/temp.svg',\n  Humidity: '/icons/humidity.svg',\n  Wind: '/icons/wind.svg',\n  Pressure: '/icons/pressure.svg',\n};\n\nconst WeatherIcons = {\n  '01d': '/icons/sunny.svg',\n  '01n': '/icons/night.svg',\n  '02d': '/icons/day.svg',\n  '02n': '/icons/cloudy-night.svg',\n  '03d': '/icons/cloudy.svg',\n  '03n': '/icons/cloudy.svg',\n  '04d': '/icons/perfect-day.svg',\n  '04n': '/icons/cloudy-night.svg',\n  '09d': '/icons/rain.svg',\n  '09n': '/icons/rain-night.svg',\n  '10d': '/icons/rain.svg',\n  '10n': '/icons/rain-night.svg',\n  '11d': '/icons/storm.svg',\n  '11n': '/icons/storm.svg',\n};\n\nconst WeatherCondition = styled.div`\n  width: 100%;\n  margin: 30px auto;\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Temperature = styled.span`\n  margin: 10px auto;\n  font-size: 20px;\n\n  & span {\n    font-size: 30px;\n  }\n`;\n\nconst WeatherLogo = styled.img`\n  margin: 10px auto;\n  width: 100px;\n  height: 100px;\n`;\n\nconst Location = styled.p`\n  font-size: 30px;\n  font-weight: 600;\n`;\n\nconst WeatherInfoLabel = styled.div`\n  width: 90%;\n  margin: 20px 25px 10px;\n\n  font-size: 15px;\n  font-weight: 600;\n`;\n\nconst WeatherInfoContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 90%;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst InfoContainer = styled.div`\n  display: flex;\n  margin: 5px 10px;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst InfoIcon = styled.img`\n  width: 35px;\n  height: 35px;\n`;\n\nconst InfoLabel = styled.p`\n  display: flex;\n  flex-direction: column;\n  font-size: 15px;\n  font-weight: 600;\n  margin: 15px;\n  & span {\n    font-size: 12px;\n    font-weight: 400;\n  }\n`;\n\nconst Restart = styled.button`\n  margin-top: 15px;\n\n  border: none;\n  color: #fff;\n  background: #035956;\n\n  font-size: 20px;\n  padding: 5px 15px;\n  border-radius: 5px;\n\n  &:hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`;\n\nfunction WeatherInfoComponent({ name, value }) {\n  return (\n    <InfoContainer>\n      <InfoIcon src={WeatherInfoIcons[name]} />\n      <InfoLabel>\n        <span>{name}</span>\n        {value}\n      </InfoLabel>\n    </InfoContainer>\n  );\n}\n\nexport default function WeatherComponent({ data }) {\n  const isDay = data?.weather[0]?.icon?.includes('d');\n\n  const getTime = (timeStamp) => {\n    return `${new Date(timeStamp * 1000).getHours()} : ${new Date(\n      timeStamp * 1000\n    ).getMinutes()}`;\n  };\n\n  console.log(data);\n  return (\n    <>\n      <WeatherCondition>\n        <Temperature>\n          <span>{`${Math.floor(data?.main?.temp - 273)}Â°C`} </span>{' '}\n          {data?.weather[0].description}\n        </Temperature>\n        <WeatherLogo src={WeatherIcons[data.weather[0].icon]} />\n      </WeatherCondition>\n      <Location>\n        {data?.name}, {data?.sys?.country}\n      </Location>\n      <WeatherInfoLabel>weather info</WeatherInfoLabel>\n      <WeatherInfoContainer>\n        <WeatherInfoComponent\n          name={isDay ? 'Sunset' : 'Sunrise'}\n          value={getTime(isDay ? data.sys.sunset : data.sys.sunrise)}\n        />\n        <WeatherInfoComponent name={'Humidity'} value={data?.main?.humidity} />\n        <WeatherInfoComponent name={'Wind'} value={data?.wind?.speed} />\n        <WeatherInfoComponent name={'Pressure'} value={data?.main?.pressure} />\n      </WeatherInfoContainer>\n      <Restart type=\"button\" onClick={() => window.location.reload()}>\n        Restart\n      </Restart>\n    </>\n  );\n}\n","import axios from 'axios';\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport CityComponent from './components/CityComponent';\nimport WeatherComponent from './components/WeatherComponent';\n\nconst API_KEY = '01aedb80acda9babf7d17c8f70b8e5de';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: auto;\n  align-items: center;\n\n  width: 375px; // for both PC and Mobile\n  background: #fff;\n  padding: 15px 5px;\n  border-radius: 5px;\n\n  box-shadow: 0 3px 5px 0 #777;\n`;\n\nconst Label = styled.div`\n  color: #000;\n\n  font-size: 35px;\n  font-weight: 700;\n`;\n\nfunction App() {\n  const [city, setCity] = useState('');\n  const [weatherData, setWeatherData] = useState();\n\n  const fetchWeather = async (e) => {\n    e.preventDefault();\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`\n    );\n    setWeatherData(response.data);\n  };\n\n  return (\n    <Container>\n      <Label>Weather Finder</Label>\n\n      {weatherData ? (\n        <WeatherComponent data={weatherData} />\n      ) : (\n        <CityComponent setCity={setCity} fetchWeather={fetchWeather} />\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}